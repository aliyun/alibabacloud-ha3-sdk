import Util;
import String;
import EncodeUtil;
import Map;

type @endpoint = string
type @instanceId = string
type @protocol = string
type @userAgent = string
type @credential = string
type @domainsuffix = string

model Config {
  endpoint?: string,
  instanceId?: string,
  protocol?: string,
  accessUserName?: string,
  accessPassWord?: string,
  userAgent?: string
}

init(config: Config) {
  if (Util.isUnset(config)) {
    throw {
      name = 'ParameterMissing',
      message = '\'config\' can not be unset'
    };
  }
  @credential = getRealmSignStr(config.accessUserName, config.accessPassWord);
  @endpoint = config.endpoint;
  @instanceId = config.instanceId;
  @protocol = config.protocol;
  @userAgent = config.userAgent;
  @domainsuffix = 'ha.aliyuncs.com';
}

/**
 * 设置Client UA 配置.
 */
function setUserAgent(userAgent: string): void {
  @userAgent = userAgent;
}

/**
 * 添加Client UA 配置.
 */
function appendUserAgent(userAgent: string): void {
  @userAgent = `${@userAgent} ${userAgent}`;
}

/**
 * 获取Client 配置 UA 配置.
 */
function getUserAgent(): string {
  var userAgent = Util.getUserAgent(@userAgent);
  return userAgent;
}

/**
 * 计算用户请求识别特征, 遵循 Basic Auth 生成规范.
 */
function getRealmSignStr(accessUserName: string, accessPassWord: string): string {
  var accessUserNameStr = String.trim(accessUserName);
  var accessPassWordStr = String.trim(accessPassWord);
  var realmStr: string = `${accessUserNameStr}:${accessPassWordStr}`;
  return EncodeUtil.base64EncodeToString(String.toBytes(realmStr, 'UTF-8'));
}

function buildHaSearchQuery(haquery: HaQuery): string {
  if (Util.isUnset(haquery.query)) {
    throw {
      name = 'ParameterMissing',
      message = '\'HaQuery.query\' can not be unset'
    };
  }
  var tempString: string = `query=${haquery.query}`;
  var configStr: string = buildHaQueryconfigClauseStr(haquery.config);
  tempString = `${tempString}&&cluster=${Util.defaultString(haquery.cluster, 'general')}`;
  tempString = `${tempString}&&config=${configStr}`;

  if (!Util.isUnset(haquery.filter)) {
    var filterStr: string = haquery.filter;

    if (!Util.empty(filterStr)) {
      var fieldValueTrimed: string = String.trim(filterStr);
      tempString = `${tempString}&&filter=${fieldValueTrimed}`;
    }
  }

  if (!Util.isUnset(haquery.customQuery)) {
    for (var keyField : Map.keySet(haquery.customQuery)) {
      var fieldValue: string = haquery.customQuery[keyField];

      if (!Util.empty(fieldValue)) {
        var fieldValueTrimed: string = String.trim(fieldValue);
        var keyFieldTrimed: string = String.trim(keyField);
        tempString = `${tempString}&&${keyFieldTrimed}=${fieldValueTrimed}`;
      }
    }
  }

if (!Util.isUnset(haquery.sort)) {
    var sortStr: string = buildHaQuerySortClauseStr(haquery.sort);

    if (!Util.empty(sortStr)) {
      tempString = `${tempString}&&sort=${sortStr}`;
    }
  }








  if (!Util.isUnset(haquery.aggregate)) {
    var aggregateClauseStr: string = buildHaQueryAggregateClauseStr(haquery.aggregate);

    if (!Util.empty(aggregateClauseStr)) {
      tempString = `${tempString}&&aggregate=${aggregateClauseStr}`;
    }
  }



  if (!Util.isUnset(haquery.distinct)) {
    var distinctClauseStr: string = buildHaQueryDistinctClauseStr(haquery.distinct);

    if (!Util.empty(distinctClauseStr)) {
      tempString = `${tempString}&&distinct=${distinctClauseStr}`;
    }
  }
var kvpairs: string = buildSearcKvPairClauseStr(haquery.kvpairs);

    if (!Util.empty(kvpairs)) {
      tempString = `${tempString}&&kvpairs=${kvpairs}`;
    }

  return tempString;
}

function buildHaQueryAggregateClauseStr(Clause: [ HaQueryAggregateClause ]): string {
  var tempClauseString: string = '';
  for (var AggregateClause : Clause) {
    var tempAggregateClauseString: string = '';
         if (Util.isUnset(AggregateClause.groupKey) || Util.isUnset(AggregateClause.aggFun)) {
    throw {
      name = 'ParameterMissing',
      message = '\'HaQueryAggregateClause.groupKey/aggFun\' can not be unset'
    };
  }



    if (!Util.empty(AggregateClause.groupKey) && !Util.empty(AggregateClause.aggFun)) {
      var groupKeyTrimed: string = String.trim(AggregateClause.groupKey);
      var aggFunTrimed: string = String.trim(AggregateClause.aggFun);
      tempAggregateClauseString = `group_key:${groupKeyTrimed},agg_fun:${aggFunTrimed}`;
    }

    if (!Util.empty(AggregateClause.range)) {
      var rangeTrimed: string = String.trim(AggregateClause.range);
      tempAggregateClauseString = `${tempAggregateClauseString},range:${rangeTrimed}`;
    }

    if (!Util.empty(AggregateClause.maxGroup)) {
      var maxGroupTrimed: string = String.trim(AggregateClause.maxGroup);
      tempAggregateClauseString = `${tempAggregateClauseString},max_group:${maxGroupTrimed}`;
    }

    if (!Util.empty(AggregateClause.aggFilter)) {
      var aggFilterTrimed: string = String.trim(AggregateClause.aggFilter);
      tempAggregateClauseString = `${tempAggregateClauseString},agg_filter:${aggFilterTrimed}`;
    }

    if (!Util.empty(AggregateClause.aggSamplerThresHold)) {
      var aggSamplerThresHoldTrimed: string = String.trim(AggregateClause.aggSamplerThresHold);
      tempAggregateClauseString = `${tempAggregateClauseString},agg_sampler_threshold:${aggSamplerThresHoldTrimed}`;
    }

    if (!Util.empty(AggregateClause.aggSamplerStep)) {
      var aggSamplerStepTrimed: string = String.trim(AggregateClause.aggSamplerStep);
      tempAggregateClauseString = `${tempAggregateClauseString},agg_sampler_step:${aggSamplerStepTrimed}`;
    }

    if (!Util.empty(tempClauseString)) {
      tempClauseString = `${tempClauseString};${tempAggregateClauseString}`;
    }else{
      tempClauseString = `${tempAggregateClauseString}`;
    }
  }
  return tempClauseString;
}


function buildHaQueryDistinctClauseStr(Clause: [ HaQueryDistinctClause ]): string {
  var tempClauseString: string = '';
  for (var DistinctClause : Clause) {
    var tempDistinctClauseString: string = '';
      if (Util.isUnset(DistinctClause.distKey)) {
    throw {
      name = 'ParameterMissing',
      message = '\'HaQueryDistinctClause.distKey\' can not be unset'
    };
  }

    if (!Util.empty(DistinctClause.distKey)) {
      var distKeyTrimed: string = String.trim(DistinctClause.distKey);
      tempDistinctClauseString = `dist_key:${distKeyTrimed}`;
    }

    if (!Util.empty(DistinctClause.distCount)) {
      var distCountTrimed: string = String.trim(DistinctClause.distCount);
      tempDistinctClauseString = `${tempDistinctClauseString},dist_count:${distCountTrimed}`;
    }

    if (!Util.empty(DistinctClause.distTimes)) {
      var distTimesTrimed: string = String.trim(DistinctClause.distTimes);
      tempDistinctClauseString = `${tempDistinctClauseString},dist_times:${distTimesTrimed}`;
    }

    if (!Util.empty(DistinctClause.reserved)) {
      var reservedTrimed: string = String.trim(DistinctClause.reserved);
      tempDistinctClauseString = `${tempDistinctClauseString},reserved:${reservedTrimed}`;
    }

    if (!Util.empty(DistinctClause.distFilter)) {
      var distFilterTrimed: string = String.trim(DistinctClause.distFilter);
      tempDistinctClauseString = `${tempDistinctClauseString},dist_filter:${distFilterTrimed}`;
    }

    if (!Util.empty(DistinctClause.updateTotalHit)) {
      var updateTotalHitTrimed: string = String.trim(DistinctClause.updateTotalHit);
      tempDistinctClauseString = `${tempDistinctClauseString},update_total_hit:${updateTotalHitTrimed}`;
    }

    if (!Util.empty(DistinctClause.grade)) {
      var gradeTrimed: string = String.trim(DistinctClause.grade);
      tempDistinctClauseString = `${tempDistinctClauseString},grade:${gradeTrimed}`;
    }

    if (!Util.empty(tempClauseString)) {
      tempClauseString = `${tempClauseString};${tempDistinctClauseString}`;
    }else{
      tempClauseString = `${tempDistinctClauseString}`;
    }
  }
  return tempClauseString;
}



function buildHaQuerySortClauseStr(Clause: [ HaQuerySortClause ]): string {
  var tempClauseString: string = '';
  for (var SortClause : Clause) {
    var fieldValueTrimed: string = String.trim(SortClause.sortOrder);
    var keyFieldTrimed: string = String.trim(SortClause.sortKey);

    if (Util.equalString(fieldValueTrimed, '+') || Util.equalString(fieldValueTrimed, '-')) {
      if (!Util.empty(fieldValueTrimed) && !Util.empty(keyFieldTrimed)) {
        if (Util.empty(tempClauseString)) {
          tempClauseString = `${fieldValueTrimed}${keyFieldTrimed}`;
        }else{
          tempClauseString = `${tempClauseString};${fieldValueTrimed}${keyFieldTrimed}`;
        }
      }
    }
  }
  return tempClauseString;
}

function buildHaQueryconfigClauseStr(Clause: HaQueryconfigClause): string {
  var tempClauseString: string = '';

  if (Util.isUnset(Clause)) {
    throw {
      name = 'ParameterMissing',
      message = '\'HaQueryconfigClause\' can not be unset'
    };
  }
  if (Util.isUnset(Clause.start))
{
  Clause.start = null;
}
  if (Util.isUnset(Clause.hit))
{
  Clause.hit = null;
}
  if (Util.isUnset(Clause.format))
{
  Clause.format = null;
}

  tempClauseString = `start:${Util.defaultString(Clause.start, '0')}`;
  tempClauseString = `${tempClauseString},hit:${Util.defaultString(Clause.hit, '10')}`;
  tempClauseString = `${tempClauseString},format:${String.toLower(Util.defaultString(Clause.format, 'json'))}`;

  if (!Util.isUnset(Clause.customConfig)) {
    for (var keyField : Map.keySet(Clause.customConfig)) {
      var fieldValue: string = Clause.customConfig[keyField];

      if (!Util.empty(fieldValue)) {
        var fieldValueTrimed: string = String.trim(fieldValue);
        var keyFieldTrimed: string = String.trim(keyField);
        if (!Util.empty(tempClauseString)){
        tempClauseString = `${tempClauseString},${keyFieldTrimed}:${fieldValueTrimed}`;
      }else{
        tempClauseString = `${keyFieldTrimed}:${fieldValueTrimed}`;
      }
      }
    }
  }
  return tempClauseString;
}

function buildSQLSearchQuery(sqlquery: SQLQuery): string {
  if (Util.isUnset(sqlquery.query)) {
    throw {
      name = 'ParameterMissing',
      message = '\'SQLQuery.query\' can not be unset'
    };
  }
  var tempString: string = `query=${sqlquery.query}`;
var kvpairs: string = buildSearcKvPairClauseStr(sqlquery.kvpairs);
if (!Util.empty(kvpairs)) {
      tempString = `${tempString}&&kvpair=${kvpairs}`;
    }

  return tempString;
}

function buildSearcKvPairClauseStr(kvPair: map[string]string): string {
  var tempkvpairsString: string = `__ops_request_id:${Util.getNonce()}`;
  if (!Util.isUnset(kvPair)){
  for (var keyField : Map.keySet(kvPair)) {
    var fieldValue: string = kvPair[keyField];

    if (!Util.empty(fieldValue)) {
      var fieldValueTrimed: string = String.trim(fieldValue);
      var keyFieldTrimed: string = String.trim(keyField);
      tempkvpairsString = `${tempkvpairsString},${keyFieldTrimed}:${fieldValueTrimed}`;
    }
  }}
  return tempkvpairsString;
}

model HaQuery {
  query: string(name='query', description='搜索主体，不能为空.并且可以指定多个查询条件及其之间的关系.'),
  cluster?: string(name='cluster', description='cluster部分用于指定要查询的集群的名字。它不仅可以同时指定多个集群，还可以指定到集群中的哪些partition获取结果。'),
  config: HaQueryconfigClause(name='config', description='config部分可以指定查询结果的起始位置、返回结果的数量、展现结果的格式、参与精排表达式文档个数等。'),
  filter?: string(name='filter', description='过滤功能支持用户根据查询条件，筛选出用户感兴趣的文档。会在通过query子句查找到的文档进行进一步的过滤，以返回最终所需结果。'),
  kvpairs?: map[string]string(name='kvpairs', description='为便于通过查询语句传递信息给具体的特征函数，用户可以在kvpairs子句中对排序表达式中的可变部分进行参数定义。'),
  sort?: [ HaQuerySortClause ](name='sort', description='用户可以通过查询语句控制结果的排序方式，包括指定排序的字段和升降序。field为要排序的字段，+为按字段值升序排序，-为降序排序'),
  aggregate?: [ HaQueryAggregateClause ](name='aggregate', description='一个关键词查询后可能会找到数以万计的文档，用户不太可能浏览所有的文档来获取自己需要的信息，有些情况下用户感兴趣的可能是一些统计的信息。'),
  distinct?: [ HaQueryDistinctClause ](name='distinct', description='打散子句可以在一定程度上保证展示结果的多样性，以提升用户体验。如一次查询可以查出很多的文档，但是如果某个用户的多个文档分值都比较高，则都排在了前面，导致一页中所展示的结果几乎都属于同一用户，这样既不利于结果展示也不利于用户体验。对此，打散子句可以对每个用户的文档进行抽取，使得每个用户都有展示文档的机会。'),
  customQuery?: map[string]string(name='customConfig', description='扩展 配置参数')
}

model HaQueryconfigClause {
  start: string(name='start', description='从结果集中第 start_offset 开始返回 document '),
  hit: string(name='hit', description='返回文档的最大数量'),
  format: string(name='format', description='指定用户返回数据格式. 支持 xml 和 json 类型数据返回  '),
  customConfig?: map[string]string(name='customConfig', description='扩展 配置参数')
}

model HaQuerySortClause {
  sortKey: string(name='sortKey', description='field为要进行统计的字段名，必须配置属性字段'),
  sortOrder: string(name='sortOrder', description='+为按字段值升序排序，-为降序排序')
}

model HaQueryAggregateClause {
  groupKey: string(name='group_key', description='field为要进行统计的字段名，必须配置属性字段'),
  aggFun: string(name='agg_fun', description='func可以为count()、sum(id)、max(id)、min(id)四种系统函数，含义分别为：文档个数、对id字段求和、取id字段最大值、取id字段最小值；支持同时进行多个函数的统计，中间用英文井号（#）分隔；sum、max、min的内容支持基本的算术运算'),
  range?: string(name='range', description='表示分段统计，可用于分布统计，只支持单个range参数。'),
  maxGroup?: string(name='max_group', description='最大返回组数'),
  aggFilter?: string(name='agg_filter', description='表示仅统计满足特定条件的文档'),
  aggSamplerThresHold?: string(name='agg_sampler_threshold', description='，抽样统计的阈值。表示该值之前的文档会依次统计，该值之后的文档会进行抽样统计；'),
  aggSamplerStep?: string(name='agg_sampler_step', description='抽样统计的步长，表示从agg_sampler_threshold后的文档将间隔agg_sampler_step个文档统计一次。对于sum和count类型的统计会把阈值后的抽样统计结果最后乘以步长进行估算，估算的结果再加上阈值前的统计结果就是最后的统计结果。')
}

model HaQueryDistinctClause {
  distKey: string(name='dist_key', description='要打散的字段'),
  distCount?: string(name='dist_count', description='一轮抽取的文档数'),
  distTimes?: string(name='dist_times', description='抽取的轮数'),
  reserved?: string(name='reserved', description='是否保留抽取之后剩余的文档。如果为false，为不保留，则搜索结果的total（总匹配结果数）会不准确。'),
  distFilter?: string(name='dist_filter', description='过滤条件，被过滤的doc不参与distinct，只在后面的排序中，这些被过滤的doc将和被distinct出来的第一组doc一起参与排序。默认是全部参与distinct。'),
  updateTotalHit?: string(name='update_total_hit', description='当reserved为false时，设置update_total_hit为true，则最终total_hit会减去被distinct丢弃的数目（不一定准确），为false则不减。'),
  grade?: string(name='grade', description='指定档位划分阈值，所有的文档将根据档位划分阈值划分成若干档，每个档位中各自根据distinct参数做distinct，可以不指定该参数，默认是所有文档都在同一档。档位的划分按照文档排序时第一维的排序依据的分数进行划分，两个档位阈值之间用 “|” 分开，档位的个数没有限制。例如：1、grade:3.0 ：表示根据第一维排序依据的分数分成两档，(< 3.0)的是第一档，(>= 3.0) 的是第二档；2、grade:3.0|5.0 ：表示分成三档，(< 3.0)是第一档，(>= 3.0，< 5.0)是第二档，(>= 5.0)是第三档。档位的先后顺序和第一维排序依据的顺序一致，即如果第一维排序依据是降序，则档位也是降序，反之亦然。')
}

model SQLQuery {
  query: string(name='query', description='搜索主体，不能为空.'),
  kvpairs?: map[string]string(name='kvpairs', description='cluster部分用于指定要查询的集群的名字。它不仅可以同时指定多个集群，还可以指定到集群中的哪些partition获取结果。')
}

model SearchQuery {
  query?: string(name='query', description='适配于 Ha3 类型 query. 参数支持子句关键字请参照文档'),
  sql?: string(name='sql', description='适配于 SQL 类型 query. 参数支持子句关键字请参照文档.')
}

model SearchRequestModel {
  headers?: map[string]string(description='headers', name='headers'),
  query: SearchQuery(description='query', name='query')
}

model SearchResponseModel {
  headers?: map[string]string(description='headers', name='headers'),
  body: string(description='body', name='body')
}

/**
 * 系统提供了丰富的搜索语法以满足用户各种场景下的搜索需求。
 */
async function SearchEx(request: SearchRequestModel, runtime: Util.RuntimeOptions): SearchResponseModel {
  return _request('GET', `/query`, request.query, request.headers, null, runtime);
}

/**
 * 系统提供了丰富的搜索语法以满足用户各种场景下的搜索需求。
 */
async function Search(request: SearchRequestModel): SearchResponseModel {
  var runtime = new Util.RuntimeOptions{
    connectTimeout = 5000,
    readTimeout = 10000,
    autoretry = false,
    ignoreSSL = false,
    maxIdleConns = 50
  };
  return SearchWithOptions(request, runtime);
}

/**
 * 系统提供了丰富的搜索语法以满足用户各种场景下的搜索需求,及传入运行时参数.
 */
async function SearchWithOptions(request: SearchRequestModel, runtime: Util.RuntimeOptions): SearchResponseModel {
  return SearchEx(request, runtime);
}

model PushDocumentsRequestModel {
  headers?: map[string]string(description='headers', name='headers'),
  body: [ map[string]any ](description='body', name='body')
}

model PushDocumentsResponseModel {
  headers?: map[string]string(description='headers', name='headers'),
  body: string(description='body', name='body')
}

/**
 * 支持新增、更新、删除 等操作，以及对应批量操作
 */
async function pushDocumentEx(dataSourceName: string, request: PushDocumentsRequestModel, runtime: Util.RuntimeOptions): PushDocumentsResponseModel {
  return _request('POST', `/update/${dataSourceName}/actions/bulk`, null, request.headers, request.body, runtime);
}

/**
 * 支持新增、更新、删除 等操作，以及对应批量操作
 */
async function pushDocuments(dataSourceName: string, keyField: string, request: PushDocumentsRequestModel): PushDocumentsResponseModel {
  var runtime = new Util.RuntimeOptions{
    connectTimeout = 5000,
    readTimeout = 10000,
    autoretry = false,
    ignoreSSL = false,
    maxIdleConns = 50
  };
  return pushDocumentsWithOptions(dataSourceName, keyField, request, runtime);
}

/**
 * 支持新增、更新、删除 等操作，以及对应批量操作,及传入运行时参数.
 */
async function pushDocumentsWithOptions(dataSourceName: string, keyField: string, request: PushDocumentsRequestModel, runtime: Util.RuntimeOptions): PushDocumentsResponseModel {
  request.headers = {
    X-Opensearch-Swift-PK-Field = keyField
  };
  return pushDocumentEx(dataSourceName, request, runtime);
}

api _request(method: string, pathname: string, query: map[string]any, headers: map[string]string, body: any, runtime: Util.RuntimeOptions): map[string]any {
  __request.protocol = Util.defaultString(@protocol, 'HTTP');
  __request.method = method;
  __request.pathname = pathname;
  __request.headers = {
    user-agent = getUserAgent(),
    host = Util.defaultString(@endpoint, `${@instanceId}.${@domainsuffix}`),
    authorization = `Basic ${@credential}`,
    content-type = 'application/json; charset=utf-8',
    ...headers
  };

  if (!Util.isUnset(query)) {
    __request.query = Util.stringifyMapValue(query);
    __request.headers.X-Opensearch-Request-ID = Util.getNonce();
  }

  if (!Util.isUnset(body)) {
    __request.headers.X-Opensearch-Swift-Request-ID = Util.getNonce();
    __request.body = Util.toJSONString(body);
  }
} returns {
  var objStr = Util.readAsString(__response.body);

  if (Util.is4xx(__response.statusCode) || Util.is5xx(__response.statusCode)) {
    var rawMsg:any = null;
      try {
        rawMsg = Util.parseJSON(objStr);
      } catch(err){
        rawMsg = objStr;
      }
    var rawMap: map[string]any = {
      errors = rawMsg
    };
    throw {
      message = __response.statusMessage,
      data = rawMap,
      code = __response.statusCode
    };
  }

  if (Util.empty(objStr)) {
    var rawbodyMap: map[string]any = {
      status = __response.statusMessage,
      code = __response.statusCode
    };
    return {
      body = Util.toJSONString(rawbodyMap),
      headers = __response.headers
    };
  }
  return {
    body = objStr,
    headers = __response.headers
  };
} runtime {
  timeouted = 'retry',
  readTimeout = runtime.readTimeout,
  connectTimeout = runtime.connectTimeout,
  httpProxy = runtime.httpProxy,
  httpsProxy = runtime.httpsProxy,
  noProxy = runtime.noProxy,
  maxIdleConns = runtime.maxIdleConns,
  retry = {
    retryable = runtime.autoretry,
    maxAttempts = Util.defaultNumber(runtime.maxAttempts, 5)
  },
  backoff = {
    policy = Util.defaultString(runtime.backoffPolicy, 'no'),
    period = Util.defaultNumber(runtime.backoffPeriod, 1)
  },
  ignoreSSL = runtime.ignoreSSL
}

