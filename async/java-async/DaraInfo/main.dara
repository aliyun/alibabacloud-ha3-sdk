/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
import Util;
import String;
import EncodeUtil;
import Map;
extends BaseClientBuilder;

type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
}

model SearchResponse {
  headers?: map[string]string(description='headers', name='headers'),
  body: string(description='body', name='body')
}

model QueryRequest {
  tableName: string(name='tableName', description='数据源名'),
  vector: [ float ](name='vector', description='向量数据'),
  namespace?: string(name='namespace', description='查询向量的空间'),
  topK?: integer(name='topK', description='返回个数'),
  indexName?: string(name='indexName', description='查询的索引名'),
  sparseData?: SparseData(name='sparseData', description='查询的稀疏向量'),
  weight?: float(name='weight', description='Query的权重'),
  content?: string(name='content', description='需要向量化的内容'),
  modal?: string(name='modal', description='使用的模型'),
  includeVector?: boolean(name='includeVector', description='是否返回文档中的向量信息'),
  outputFields?: [ string ](name='outputFields', description='需要返回值的字段列表'),
  order?: string(name='order', description='排序顺序, ASC：升序  DESC: 降序'),
  searchParams?: string(name='searchParams', description='查询参数'),
  filter?: string(name='filter', description='过滤表达式'),
  scoreThreshold?: float(name='scoreThreshold', description='分数过滤， 使用欧式距离时，只返回小于scoreThreshold的结果。使用内积时，只返回大于scoreThreshold的结果'),
  vectorCount?: integer(name='vectorCount', description='vector字段中包含的向量个数'),
  sort?: string(name='sort', description='排序表达式')
}

model SparseData {
  count?: [ integer ](name='count', description='每个稀疏向量中包含的元素个数'),
  indices: [ long ](name='indices', description='元素下标（需要从小到大排序）'),
  values: [ float ](name='values', description='元素值（与下标一一对应）')
}

model MultiQueryRequest {
  tableName: string(name='tableName', description='数据源名'),
  queries: [ QueryRequest ](name='queries', description='多向量列表'),
  topK?: integer(name='topK', description='返回个数'),
  includeVector?: boolean(name='includeVector', description='是否返回文档中的向量信息'),
  outputFields?: [ string ](name='outputFields', description='需要返回值的字段列表'),
  order?: string(name='order', description='排序顺序, ASC：升序  DESC: 降序'),
  filter?: string(name='filter', description='过滤表达式')
}

model FetchRequest {
  tableName: string(name='tableName', description='数据源名'),
  ids: [ string ](name='ids', description='主键列表')
}

model StatsRequest {
  tableName: string(name='tableName', description='数据源名')
}

/**
 * 向量查询
 */
async function query(request: QueryRequest): SearchResponse {
  return @handler.do('Restful', 'Query', 'POST', '/vector-service/query', 'json', false, 'json', request);
}

/**
 * 向量预测查询
 */
async function inferenceQuery(request: QueryRequest): SearchResponse {
  return @handler.do('Restful', 'InferenceQuery', 'POST', '/vector-service/inference-query', 'json', false, 'json', request);
}

/**
 * 多namespace查询
 */
async function multiQuery(request: MultiQueryRequest): SearchResponse {
  return @handler.do('Restful', 'MultiQuery', 'POST', '/vector-service/multi-query', 'json', false, 'json', request);
}

/**
 * 查询数据
 */
async function fetch(request: FetchRequest): SearchResponse {
  return @handler.do('Restful', 'Fetch', 'POST', '/vector-service/fetch', 'json', false, 'json', request);
}

/**
 * 文档统计
 */
async function stats(request: StatsRequest): SearchResponse {
  return @handler.do('Restful', 'Stats', 'POST', '/vector-service/stats', 'json', false, 'json', request);
}

model PushDocumentsRequest {
  headers?: map[string]string(description='headers', name='headers'),
  body: [ map[string]any ](description='body', name='body')
}

model PushDocumentsResponse {
  headers?: map[string]string(description='headers', name='headers'),
  body: string(description='body', name='body')
}

/**
 * 支持新增、更新、删除 等操作，以及对应批量操作
 */
async function pushDocuments(dataSourceName: string, keyField: string, request: PushDocumentsRequest): PushDocumentsResponse {
  return @handler.do('Restful', 'PushDocuments', 'POST', '/update/${dataSourceName}/actions/bulk', 'json', false, 'json', request);
}

/**
 * 用于内网环境的新增、更新、删除 等操作，以及对应批量操作
 */
async function pushDocumentsWithSwift(dataSourceName: string, keyField: string, topic: string, swift: string, request: PushDocumentsRequest): PushDocumentsResponse {
  return @handler.do('Restful', 'PushDocumentsWithSwift', 'POST', '/update/${dataSourceName}/actions/bulk', 'json', false, 'json', request);
}